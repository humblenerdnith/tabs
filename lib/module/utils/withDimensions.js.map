{"version":3,"sources":["withDimensions.tsx"],"names":["React","Dimensions","hoistNonReactStatic","isOrientationLandscape","width","height","withDimensions","WrappedComponent","EnhancedComponent","props","handleOrientationChange","window","setState","dimensions","isLandscape","get","state","dimensionsSubscription","addEventListener","remove","Component","displayName"],"mappings":"0dAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,UAAT,KAAuC,cAAvC,CACA,MAAOC,CAAAA,mBAAP,KAAgC,yBAAhC,CAYA,MAAO,IAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,UAAGC,CAAAA,KAAH,MAAGA,KAAH,CAAUC,MAAV,MAAUA,MAAV,OACpCD,CAAAA,KAAK,CAAGC,MAD4B,EAA/B,CAGP,cAAe,SAASC,CAAAA,cAAT,CACbC,gBADa,CAEgE,IACvEC,CAAAA,iBADuE,0EAI3E,2BAAYC,KAAZ,CAA0B,mDACxB,mFAAMA,KAAN,GADwB,MAyB1BC,uBAzB0B,CAyBA,eAAwC,IAArCC,CAAAA,MAAqC,OAArCA,MAAqC,IACxDP,CAAAA,KADwD,CACtCO,MADsC,CACxDP,KADwD,CACjDC,MADiD,CACtCM,MADsC,CACjDN,MADiD,CAEhE,MAAKO,QAAL,CAAc,CACZC,UAAU,CAAE,CAAET,KAAK,CAALA,KAAF,CAASC,MAAM,CAANA,MAAT,CADA,CAEZS,WAAW,CAAEX,sBAAsB,CAAC,CAAEC,KAAK,CAALA,KAAF,CAASC,MAAM,CAANA,MAAT,CAAD,CAFvB,CAAd,EAID,CA/ByB,qBAGEJ,UAAU,CAACc,GAAX,CAAe,QAAf,CAHF,CAGhBX,MAHgB,iBAGhBA,KAHgB,CAGTC,OAHS,iBAGTA,MAHS,CAIxB,MAAKW,KAAL,CAAa,CACXH,UAAU,CAAE,CAAET,KAAK,CAALA,MAAF,CAASC,MAAM,CAANA,OAAT,CADD,CAEXS,WAAW,CAAEX,sBAAsB,CAAC,CAAEC,KAAK,CAALA,MAAF,CAASC,MAAM,CAANA,OAAT,CAAD,CAFxB,CAAb,CAKA,MAAKY,sBAAL,CAA8B,IAA9B,CATwB,aAUzB,CAd0E,2FAgBvD,CAElB,KAAKA,sBAAL,CAA8BhB,UAAU,CAACiB,gBAAX,CAC5B,QAD4B,CAE5B,KAAKR,uBAFuB,CAA9B,CAID,CAtB0E,mEAwBpD,CAErB,KAAKO,sBAAL,CAA4BE,MAA5B,GACD,CA3B0E,uCAqClE,CAEP,MAAO,qBAAC,gBAAD,aAAsB,KAAKV,KAA3B,CAAsC,KAAKO,KAA3C,mDAAP,CACD,CAxC0E,+BAC7ChB,KAAK,CAACoB,SADuC,EACvEZ,iBADuE,CAEpEa,WAFoE,mBAEpCd,gBAAgB,CAACc,WAFmB,KA4C7E,MAAOnB,CAAAA,mBAAmB,CAACM,iBAAD,CAAoBD,gBAApB,CAA1B,CACD","sourcesContent":["import * as React from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\ntype DimensionsType = {\n  width: number;\n  height: number;\n};\n\ntype InjectedProps = {\n  dimensions: DimensionsType;\n  isLandscape: boolean;\n};\n\nexport const isOrientationLandscape = ({ width, height }: DimensionsType) =>\n  width > height;\n\nexport default function withDimensions<Props extends InjectedProps>(\n  WrappedComponent: React.ComponentType<Props>\n): React.ComponentType<Pick<Props, Exclude<keyof Props, keyof InjectedProps>>> {\n  class EnhancedComponent extends React.Component {\n    static displayName = `withDimensions(${WrappedComponent.displayName})`;\n\n    constructor(props: Props) {\n      super(props);\n\n      const { width, height } = Dimensions.get('window');\n      this.state = {\n        dimensions: { width, height },\n        isLandscape: isOrientationLandscape({ width, height }),\n      };\n      // @ts-ignore\n      this.dimensionsSubscription = null;\n    }\n\n    componentDidMount() {\n      // @ts-ignore\n      this.dimensionsSubscription = Dimensions.addEventListener(\n        'change',\n        this.handleOrientationChange\n      );\n    }\n\n    componentWillUnmount() {\n      // @ts-ignore\n      this.dimensionsSubscription.remove();\n    }\n\n    handleOrientationChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n      this.setState({\n        dimensions: { width, height },\n        isLandscape: isOrientationLandscape({ width, height }),\n      });\n    };\n\n    render() {\n      // @ts-ignore\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  // @ts-ignore\n  return hoistNonReactStatic(EnhancedComponent, WrappedComponent);\n}\n"]}